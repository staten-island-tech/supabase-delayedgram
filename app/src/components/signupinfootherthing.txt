other one

<!-- <script setup lang="ts">
import { supabase } from '../supabaseclient'

const username = ref('')
const email = ref('')
const password = ref('')

import { ref } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()
const handleSignUp = async () => {
  // YES I KNOW THIS IS BAD CODE MR WHALEN
  try {
    // 1. Check if user already exists
    const { data: existingUser, error: fetchError } = await supabase
      .from('login_info')
      .select('*')
      .eq('email', email.value)
      .eq('username', username.value)
      .maybeSingle()

    if (fetchError) {
      console.log('fetch error:', fetchError)
      throw fetchError
    }

    if (existingUser) {
      alert('This account already exists. Please log in.')
      return
    }

    // 2. Insert new user
    const { error: insertError } = await supabase.from('login_info').insert([
      {
        username: username.value,
        email: email.value,
      },
    ])

    if (insertError) {
      console.log('insertError:', insertError)
      throw insertError
    }

    alert('Sign-up successful!')
    router.push('/home')

    // Clear inputs
    username.value = ''
    email.value = ''
    password.value = ''
  } catch (err: any) {
    // Handle all errors here
    alert(`Sign-up failed: ${err.message}`)
    console.error('Error during sign-up:', err)
  }
}
</script> -->





good one 

<template>
  <div
    class="min-h-screen flex justify-center items-center bg-gradient-to-r from-blue-800 to-gray-400"
  >
    <div class="w-full max-w-sm p-6 bg-white rounded-lg shadow-lg">
      <h1 class="text-3xl font-semibold text-center text-gray-800 mb-6">SIGN UP</h1>
      <form @submit.prevent="handleSignUp" class="space-y-4">
        <input
          v-model="email"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent"
          type="email"
          placeholder="EMAIL"
        />
        <input
          v-model="username"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent"
          type="text"
          pattern="[A-Za-z0-9._]+"
          placeholder="USERNAME"
        />
        <input
          v-model="password"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent"
          type="password"
          pattern="[A-Za-z0-9._]+"
          placeholder="PASSWORD"
        />
        <button
          type="submit"
          class="w-full py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 transition duration-200 block text-center"
        >
          SIGN UP
        </button>
        <nav class="items-center text-center">
          <RouterLink
            to="/"
            class="text-center text-blue-800 hover:text-blue-900 hover:underline transition duration-200"
          >
            Have an account? Log in!
          </RouterLink>
        </nav>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import { supabase } from '../supabaseclient'

const username = ref('')
const email = ref('')
const password = ref('')

const router = useRouter()

const handleSignUp = async () => {
  console.log(email.value, password.value)
  try {
    // üîê Step 1: Sign up the user using Supabase Auth
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: email.value,
      password: password.value,
    })

    if (signUpError) {
      console.error('Auth sign-up error:', signUpError)
      throw new Error('Failed to sign up. Please try again.')
    }

    const userId = signUpData.user?.id
    if (!userId) {
      throw new Error('No user ID returned from Supabase Auth.')
    }

    // üß† Step 2: Save extra info to MainUserTable
    const { error: insertError } = await supabase.from('MainUserTable').insert([
      {
        id: userId, // Must match the auth user ID
        username: username.value,
        email: email.value,
      },
    ])

    if (insertError) {
      console.error('Error inserting into MainUserTable:', insertError)
      throw new Error('Failed to save profile info.')
    }

    alert('Sign-up successful! üéâ')
    router.push('/home')

    // üßπ Clear inputs
    username.value = ''
    email.value = ''
    password.value = ''
  } catch (err) {
    const message = err instanceof Error ? err.message : 'Unknown error occurred.'
    alert(`Sign-up failed: ${message}`)
    console.error('Sign-up error:', err)
  }
}
</script>


STUFF FOR CREATING POSTS


<template>
  <div class="p-4 max-w-md mx-auto bg-white shadow rounded-lg space-y-4">
    <h2 class="text-xl font-semibold text-gray-800">Upload an Image</h2>

    <input type="file" @change="handleFileChange" accept="image/*" />

    <button
      @click="uploadImage"
      :disabled="!selectedFile || uploading"
      class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
    >
      {{ uploading ? 'Uploading...' : 'Upload Image' }}
    </button>

    <div v-if="imageUrl" class="mt-4">
      <p class="text-sm text-gray-600">Uploaded Image:</p>
      <img :src="imageUrl" alt="Uploaded" class="mt-2 rounded shadow max-w-full h-auto" />
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { supabase } from '../supabaseclient'

const imageUrl = ref<string | null>(null)
const uploading = ref(false)

const selectedFile = ref<File | null>(null)

const handleFileChange = (event: Event) => {
  const files = (event.target as HTMLInputElement).files
  if (files && files.length > 0) {
    selectedFile.value = files[0]
    console.log('File selected:', selectedFile.value.name)
  } else {
    console.log('No file selected.')
  }
}

const uploadImage = async () => {
  if (!selectedFile.value) return

  uploading.value = true

  const file = selectedFile.value
  const filePath = `uploads/${Date.now()}-${file.name}`

  const { error } = await supabase.storage
    .from('images') // Make sure this matches your bucket name
    .upload(filePath, file)

  if (error) {
    alert('Upload failed: ' + error.message)
    console.error('Upload error:', error)
    uploading.value = false
    return
  }

  const { data } = supabase.storage.from('images').getPublicUrl(filePath)

  imageUrl.value = data.publicUrl
  uploading.value = false
}
</script>

<style scoped></style>

